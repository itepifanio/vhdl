// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/04/2019 11:06:21"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          final
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module final_vlg_vec_tst();
// constants                                           
// general purpose registers
reg bt1;
reg bt2;
reg bt3;
reg clk;
reg [17:0] instrucao;
// wires                                               
wire [15:0] d_a;
wire [15:0] d_b;
wire [15:0] d_op_ula;
wire [15:0] d_ula;
wire [17:0] db_instrucao;
wire [15:0] debug_reg;
wire l1;
wire l2;
wire l3;
wire l4;
wire [6:0] sd1;
wire [6:0] sd2;
wire [6:0] sd3;
wire [6:0] sd4;
wire [2:0] seletor;
wire [15:0] valor_ula_out;

// assign statements (if any)                          
final i1 (
// port map - connection between master ports and signals/registers   
	.bt1(bt1),
	.bt2(bt2),
	.bt3(bt3),
	.clk(clk),
	.d_a(d_a),
	.d_b(d_b),
	.d_op_ula(d_op_ula),
	.d_ula(d_ula),
	.db_instrucao(db_instrucao),
	.debug_reg(debug_reg),
	.instrucao(instrucao),
	.l1(l1),
	.l2(l2),
	.l3(l3),
	.l4(l4),
	.sd1(sd1),
	.sd2(sd2),
	.sd3(sd3),
	.sd4(sd4),
	.seletor(seletor),
	.valor_ula_out(valor_ula_out)
);
initial 
begin 
#1000000 $finish;
end 

// bt1
initial
begin
	bt1 = 1'b1;
	bt1 = #20000 1'b0;
	bt1 = #180000 1'b1;
	bt1 = #20000 1'b0;
end 

// bt2
initial
begin
	bt2 = 1'b0;
	bt2 = #360000 1'b1;
	bt2 = #20000 1'b0;
	bt2 = #280000 1'b1;
	bt2 = #40000 1'b0;
end 

// bt3
initial
begin
	bt3 = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 
// instrucao[ 17 ]
initial
begin
	instrucao[17] = 1'b0;
end 
// instrucao[ 16 ]
initial
begin
	instrucao[16] = 1'b0;
end 
// instrucao[ 15 ]
initial
begin
	instrucao[15] = 1'b0;
end 
// instrucao[ 14 ]
initial
begin
	instrucao[14] = 1'b0;
end 
// instrucao[ 13 ]
initial
begin
	instrucao[13] = 1'b0;
end 
// instrucao[ 12 ]
initial
begin
	instrucao[12] = 1'b0;
	instrucao[12] = #320000 1'b1;
	instrucao[12] = #160000 1'b0;
	instrucao[12] = #180000 1'b1;
	instrucao[12] = #180000 1'b0;
end 
// instrucao[ 11 ]
initial
begin
	instrucao[11] = 1'b0;
	instrucao[11] = #320000 1'b1;
	instrucao[11] = #160000 1'b0;
	instrucao[11] = #180000 1'b1;
	instrucao[11] = #180000 1'b0;
end 
// instrucao[ 10 ]
initial
begin
	instrucao[10] = 1'b0;
end 
// instrucao[ 9 ]
initial
begin
	instrucao[9] = 1'b0;
end 
// instrucao[ 8 ]
initial
begin
	instrucao[8] = 1'b0;
	instrucao[8] = #660000 1'b1;
	instrucao[8] = #180000 1'b0;
end 
// instrucao[ 7 ]
initial
begin
	instrucao[7] = 1'b0;
end 
// instrucao[ 6 ]
initial
begin
	instrucao[6] = 1'b0;
end 
// instrucao[ 5 ]
initial
begin
	instrucao[5] = 1'b0;
	instrucao[5] = #320000 1'b1;
	instrucao[5] = #160000 1'b0;
	instrucao[5] = #180000 1'b1;
	instrucao[5] = #180000 1'b0;
end 
// instrucao[ 4 ]
initial
begin
	instrucao[4] = 1'b0;
end 
// instrucao[ 3 ]
initial
begin
	instrucao[3] = 1'b0;
	instrucao[3] = #10000 1'b1;
	instrucao[3] = #150000 1'b0;
end 
// instrucao[ 2 ]
initial
begin
	instrucao[2] = 1'b0;
	instrucao[2] = #10000 1'b1;
	instrucao[2] = #310000 1'b0;
end 
// instrucao[ 1 ]
initial
begin
	instrucao[1] = 1'b0;
end 
// instrucao[ 0 ]
initial
begin
	instrucao[0] = 1'b0;
	instrucao[0] = #160000 1'b1;
	instrucao[0] = #160000 1'b0;
end 
endmodule

